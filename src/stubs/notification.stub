<?php

namespace App\Notifications;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Notifications\Messages\MailMessage;
use Illuminate\Notifications\Notification;
use Nta\AuthOtp\app\Messages\SMSMessage;

class {Module} extends Notification implements ShouldQueue
{
    use Queueable;

    public $defaultChannels = ['database'];

    /**
     * Code otp when send notify
     *
     * @var int|string
     */
    protected $otp;

    /**
     * The lifetime of the otp code
     * Time will be in minutes
     *
     * @var int
     */
    protected $lifeTime;

    /**
     * Channel for sending otp
     *
     * @var string
     */
    protected $channels;

    /**
     * Create a new notification instance.
     *
     * @return void
     */
    public function __construct($channels = null, $otpLength = null, $lifeTime = null)
    {
        $this->otp = $this->generateOtp($otpLength ?? config('otp.length'));
        $this->lifeTime = $lifeTime ?? config('otp.lifeTime');
        $this->channels = $channels ?? config('otp.channels');
        $this->defaultChannels = $this->verifyChannels($this->channels);
    }

    /**
     * Get the notification's delivery channels.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function via($notifiable)
    {
        $notifiable->notifications()
            ->where('type', 'LIKE', '%\{Module}%')
            ->whereNull('read_at')->get()->markAsRead();
        return $this->defaultChannels;
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toMail($notifiable)
    {
        return (new MailMessage)
            ->line('Your OTP is ' . $this->otp)
            ->line('Thank you for using our application!');
    }

    /**
     * Get the mail representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return \Illuminate\Notifications\Messages\MailMessage
     */
    public function toSMS($notifiable)
    {
        return (new SMSMessage)
                    ->to('+84xxxxxxxxx')
                    ->body('Your OTP is ' . $this->otp);
    }

    /**
     * Get the array representation of the notification.
     *
     * @param  mixed  $notifiable
     * @return array
     */
    public function toDatabase($notifiable)
    {
        return [
            'otp' => $this->otp,
            'expired_at' => now()->addMinutes($this->lifeTime)->toDateTimeString(),
        ];
    }

    /**
     * Generate OTP
     *
     * @param integer|string $length
     *
     * @return string
     */
    public function generateOtp($length)
    {
        $generator = "0987654321";
        $result = "";

        for ($i = 1; $i <= $length; $i++) {
            $result .= substr($generator, (rand()%(strlen($generator))), 1);
        }
        return $result;
    }

    /**
     * Verify channels
     *
     * @param string|array $channels
     *
     * @return array
     */
    public function verifyChannels($channels)
    {
        if ($channels && is_array($channels)) {
            return array_merge($this->defaultChannels, $channels);
        }
        if ($channels && is_string($channels)) {
            array_push($this->defaultChannels, $channels);
        }
        return $this->defaultChannels;
    }
}
